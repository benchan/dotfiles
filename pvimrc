""""""""""""""""""""""""""""""""""""""""""""
"         Vim 最小構成用 vimrc             "
""""""""""""""""""""""""""""""""""""""""""""

"最低限欲しいプラグインだけをロード {{{
set rtp+=$HOME/.vim/bundle/tcomment_vim
" }}}

" 基本設定 {{{

let mapleader = ','

syntax enable
"行番号表示
set number
"バックアップファイルいらない
set nobackup
"vi協調モードoff
set nocompatible
"自動インデント
set autoindent
"タブが対応する空白の数
set tabstop=4 shiftwidth=4 softtabstop=4
" set tabstop=2 shiftwidth=2 softtabstop=2
"タブの代わりにスペースを使う
set expandtab
"長い行で折り返す
set wrap
"検索が末尾まで進んだら，ファイル先頭につなげる
set wrapscan
"対応する括弧にわずかの間ジャンプする
set showmatch
"カーソルが何行何列目にあるか表示する
set ruler
"エンコーディング
set encoding=utf-8
"最下ウィンドウにステータス行が表示される時
"1: ウィンドウの数が2以上 2:常
set laststatus=2
"モードライン無効化
set modelines=0
"スクロール時の余白確保
set scrolloff=5
"いろいろスマート
set smarttab
set cindent
"大文字が入っている時のみ大文字小文字を区別
set ignorecase
set smartcase
"ビープ音OFF
set vb t_vb=
"ホワイトスペース類を表示する
set list
set listchars=tab:»-,trail:-,eol:↲,extends:»,precedes:«,nbsp:%
"Boostや自前ビルドgccをpathに追加
set path=.,/usr/include,/usr/local/include,/usr/local/Cellar/gcc/4.6.3/gcc/include/c++/4.6.3,/Users/rhayasd/.rbenv/versions/1.9.3-p125/lib/ruby/1.9.1/,/Users/rhayasd/programs/**
"起動時のメッセージを消す
set shortmess+=I
"起動時IMEをOFFにする
set iminsert=0 imsearch=0
"IMを使う
set noimdisable
"コマンドラインでのIM無効化
set noimcmdline
"バックスペースでなんでも消せるように
set backspace=indent,eol,start
"ファイル切替時にファイルを隠す
set hidden
"日本語ヘルプを優先的に検索
set helplang=ja,en
"OSのクリップボードを使う
set clipboard+=unnamed
"矩形選択で自由に移動する
set virtualedit+=block
"改行コードの自動認識
set fileformats=unix,dos,mac
"コマンド実行中は再描画しない
set lazyredraw
"高速ターミナル接続を行う
set ttyfast
"MacVim Kaoriyaに標準で入っている辞書を無効化
if has('mac')
    let g:plugin_dicwin_disable = 1
endif
" 補完でプレビューウィンドウを開かない
set completeopt=longest,menu
" foldingの設定
set foldenable
set foldmethod=marker
" autocmd FileType cpp,c  set foldmethod=syntax
" C++ ラベル字下げ設定
set cinoptions+=:0,g0
" 編集履歴を保存して終了する
if has('persistent_undo')
    set undodir=~/.vim/undo
    set undofile
endif
" command-line-window の縦幅
set cmdwinheight=14
" ステータスライン
set ruf=%45(%12f%=\ %m%{'['.(&fenc!=''?&fenc:&enc).']'}\ %l-%v\ %p%%\ [%02B]%)
set statusline=%f:\ %{substitute(getcwd(),'.*/','','')}\ %m%=%{(&fenc!=''?&fenc:&enc).':'.strpart(&ff,0,1)}\ %l-%v\ %p%%\ %02B
" *.md で読み込む filetype を変更（デフォルトは modula2）
autocmd BufRead *.md set ft=markdown"}}}

" キーマップ {{{
" ; と : をスワップ
noremap ; :
noremap : ;
"insertモードから抜ける
inoremap jj <esc>
inoremap <c-j> j
" yの挙動はy$のほうが自然な気がする
nnoremap y y$
" 縦方向は論理移動する
nnoremap j gj
nnoremap k gk
"esc->escで検索結果をクリア
nnoremap <silent><esc><esc> :<c-u>nohlsearch<cr><esc>
"行頭・行末の移動
nnoremap <tab> g
vnoremap <tab> g
nnoremap 0 ^
vnoremap 0 ^
nnoremap <c-0> 0
vnoremap <c-0> 0
nnoremap - $
vnoremap - $
" q:は誤爆しやすい
nnoremap q; q:
nnoremap <c-:> q:
nnoremap q: :q
" insertモードでもquit
inoremap <c-q><c-q> <esc>:wqa<cr>
" insertモードでもcmdmode
inoremap <c-:> <esc>:
" 空行挿入
nnoremap <silent><space> :<c-u>call append(expand('.'), '')<cr>j
"ヘルプ表示
nnoremap <leader>vh :vert bo help<space>
"insertモード時はemacsライクなバインディング．ポップアップが出ないように移動．
inoremap <c-e> <end>
vnoremap <c-e> <end>
cnoremap <c-e> <end>
inoremap <c-a> <home>
vnoremap <c-a> <home>
cnoremap <c-a> <home>
inoremap <c-n> <down>
inoremap <c-p> <up>
inoremap <c-b> <left>
inoremap <c-f> <right>
inoremap <c-d> <del>
cnoremap <c-d> <del>
inoremap <c-k> <c-o>d
cnoremap <c-k> <c-o>d
"バッファ切り替え
nnoremap <silent><c-n>   :<c-u>bnext<cr>
nnoremap <silent><c-p>   :<c-u>bprevious<cr>
"<cr>の挙動
nnoremap <cr> i<cr><esc>
"<bs>の挙動
nnoremap <bs> i<bs><esc>
"コマンドラインモードでのカーソル移動
cnoremap <c-f> <right>
cnoremap <c-b> <left>
"_で次の_の手前まで
onoremap _ vf_h
" カーソルキーでの上下移動
nnoremap <silent><down>  <c-w>-
nnoremap <silent><up>    <c-w>+
nnoremap <silent><left>  <c-w><
nnoremap <silent><right> <c-w>>
" ペーストした文字列をビジュアルモードで選択
nnoremap <expr>gp '`['.strpart(getregtype(),0,1).'`]'
" 日付の挿入
inoremap <c-x>date <c-r>=strftime('%y/%m/%d(%a) %h:%m')<cr>
nnoremap <leader>date :r<space>!date<space>+'\%y/\%m/\%d(\%a)<space>\%h:\%m'<cr>
"tcomment.vimのキーマップ {{{
nnoremap <Leader>c :TComment<CR>
vnoremap <Leader>c :TComment<CR>
vnoremap <Leader>C :TCommentBlock<CR>
"}}}
